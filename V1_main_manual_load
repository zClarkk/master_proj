from monai.networks import nets
import torch
import torch.nn as nn
from torch.nn import functional as F
from torch.utils.data import DataLoader, Dataset
import matplotlib.pyplot as plt
import math
from torchinfo import summary

### Cuda Safety
if torch.cuda.is_available():
  print('CUDA GPU found: ', torch.cuda.get_device_name(['0']))
  device = 'cuda'
else:
  print('CUDA not found!')
  device = 'cpu'

### Load Data
data_path = "/data_rechenknecht03_2/students/erguen/JSRT_img0_lms.pth"
imgs = torch.load(data_path, map_location='cpu')
for key, value in imgs.items():
    if key == "JSRT_img0":
        img0 = value
    if key == "JSRT_lms":
        lms = value

# implot = plt.imshow(img0[20, :, :], cmap='gray')
# circle = plt.Circle((lms[20, 1, 0], lms[20, 1, 1],), 10, color='blue')
# plt.gca().add_patch(circle)
# plt.scatter(lms[20, 1, 0], lms[20, 1, 1], s=5, c='r')

# patients, landmarks, axis, possible points
circ = torch.zeros([247, 166, 2, 500])

# needs to be 0 for below
lm_count = 165
def circleCoordByFormula(patient=0, width=255, height=255, radius=10, epsilon=5, lm=0, multiple=True):
  global lm_count
  print(lm)
  count = 0
  x_axis = 0
  y_axis = 1
  for y in range(height):
    for x in range(width):
      if abs((x-lms[patient][lm][x_axis])**2 + (y-lms[patient][lm][y_axis])**2 - radius**2) < epsilon**2:
        circ[1][lm][x_axis][count] = x
        circ[1][lm][y_axis][count] = y
        count += 1
  if multiple == True and lm_count < 165:
    lm_count += 1
    circleCoordByFormula(lm=lm+1)


def plotIt(file=circ, patient=0, lm=0, s_lm=5, s_circ=1, c_lm="r", c_circ="b"):
  if lm > -1:
    implot = plt.imshow(img0[patient, :, :], cmap='gray')
    plt.scatter(lms[patient, :, 0], lms[patient, :, 1], s=s_lm, c=c_lm)
    plt.scatter(file[1][lm][0][:], file[1][lm][1][:],  s=s_circ, c=c_circ)  
  elif lm == -1:
    implot = plt.imshow(img0[patient, :, :], cmap='gray')
    plt.scatter(lms[patient, :, 0], lms[patient, :, 1], s=s_lm, c=c_lm)
    for mark in range(lm_count):
      plt.scatter(file[1][mark][0][:], file[1][mark][1][:],  s=s_circ, c=c_circ) 

#circleCoordByFormula()
#torch.save(circ, "circle.pt")

ten = torch.load("/home/erguen/Documents/monai-env/circle.pt")
plotIt(file=ten, lm=-1)
